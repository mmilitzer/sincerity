<?xml version="1.0"?>
<project name="Sincerity" default="build"
	xmlns:creel="antlib:com.threecrickets.creel.ant"
	xmlns:jdeb='antlib:org.vafer.jdeb.ant'
	xmlns:redline='antlib:org.redline_rpm.ant'>

	<property name="root" location="${basedir}/.." />
	
	<!--property file="${root}/build/private.properties" /-->
	<property file="${root}/build/custom.properties" />

	<property name="component.source" value="${root}/components/${component}/source" />
	<property name="component.resources" value="${root}/components/${component}/resources" />
	<property name="component.notices" value="${root}/components/notices" />
	<property name="component.reference" value="${root}/components/reference" />
	<property name="component.scripts" value="${root}/components/scripts" />
	<property name="component.sincerity-javascript-library" value="${root}/components/sincerity-javascript-library" />
	<property name="component.templates" value="${root}/components/templates" />
	<property name="component.eclipsePlugin" value="${root}/components/eclipse-plugin/plugin" />
	<property name="component.agent" value="${root}/components/firewall-friendly-agent" />

	<property name="dependencies" value="${root}/dependencies" />
	<property name="dependencies.jars" value="${dependencies}/libraries/jars" />

	<property name="cache" value="${root}/build/cache" />
	<property name="cache.classes" value="${cache}/classes" />
	<property name="cache.eclipsePlugin" value="${cache}/eclipse-plugin" />
	<property name="cache.agent" value="${cache}/agent" />
	<property name="cache.jars" value="${cache}/jars" />
	<property name="cache.maven.pom" location="${cache}/maven/pom" />
	<property name="cache.maven.build" location="${cache}/maven/build" />

	<property name="distribution" value="${root}/build/distribution" />
	<property name="distribution.content" value="${distribution}/content" />
	<property name="distribution.libraries" value="${distribution.content}/libraries" />
	<property name="distribution.jars" value="${distribution.libraries}/jars" />
	<property name="distribution.reference" value="${distribution.content}/reference" />
	<property name="distribution.api" value="${distribution.reference}/api/${component.group}/${component.artifact}/${component.version}${component.version.postfix}" />
	<property name="distribution.manual" value="${distribution.reference}/manuals/${component.group}/${component.artifact}/${component.version}${component.version.postfix}" />
	<property name="distribution.source" value="${distribution.reference}/source/${component.group}/${component.artifact}/${component.version}${component.version.postfix}" />
	<property name="distribution.templates" value="${distribution.content}/templates" />
	<property name="distribution.eclipsePlugin" value="${distribution}/eclipse-plugin" />
	<property name="distribution.agent" value="${distribution}/firewall-friendly-agent" />

	<taskdef resource="com/threecrickets/creel/ant/antlib.xml" uri="antlib:com.threecrickets.creel.ant" classpath="${dependencies}/libraries/jars/com.threecrickets.creel/creel/${creel.version}/creel.jar" />
	<taskdef uri="antlib:org.vafer.jdeb.ant" resource="org/vafer/jdeb/ant/antlib.xml">
		<classpath>
			<pathelement location="${dependencies.jars}/org.vafer.jdeb/jdeb/${jdeb.version}/jdeb.jar" />
			<pathelement location="${dependencies.jars}/org.bouncycastle/bcpg-jdk15on/${bouncycastle.version}/bcpg-jdk15on.jar" />
			<pathelement location="${dependencies.jars}/org.bouncycastle/bcprov-jdk15on/${bouncycastle.version}/bcprov-jdk15on.jar" />
		</classpath>
	</taskdef>
	<taskdef uri="antlib:org.redline_rpm.ant" resource="org/redline_rpm/antlib.xml">
		<classpath>
			<pathelement location="${dependencies.jars}/org.redline-rpm/redline/${redline.version}/redline.jar" />
			<pathelement location="${dependencies.jars}/org.apache.commons/commons-compress/${commons-compress.version}/commons-compress.jar" />
			<pathelement location="${dependencies.jars}/org.bouncycastle/bcpg-jdk15on/${bouncycastle.version}/bcpg-jdk15on.jar" />
			<pathelement location="${dependencies.jars}/org.bouncycastle/bcprov-jdk15on/${bouncycastle.version}/bcprov-jdk15on.jar" />
			<pathelement location="${dependencies.jars}/org.slf4j/slf4j-api/${slf4j.version}/slf4j-api.jar" />
			<pathelement location="${dependencies.jars}/org.slf4j/slf4j-simple/${slf4j.version}/slf4j-simple.jar" />
		</classpath>
	</taskdef>
	<taskdef name="izpack" classname="com.izforge.izpack.ant.IzPackTask" classpath="${dependencies.jars}/org.codehaus.izpack/izpack-standalone-compiler/${izpack.version}/izpack-standalone-compiler.jar" />
	
	<macrodef name="packages">
		<attribute name="suffix" />
		<sequential>
			<copy
				file="${distribution}/${component}-${component.version}${component.version.postfix}@{suffix}"
				todir="${packages.repo}/${packages.section}/${component.version}${component.version.postfix}"
				failonerror="false" />
		</sequential>
	</macrodef>
	
	<target name="dependencies" description="Resolve dependencies">
		<creel:run ref="dependencies-creel" libraryDir="${cache.jars}" state="${cache.jars}/.creel">
			<module group="com.threecrickets.scripturian" name="scripturian" version="1.1+" />
			<module group="com.threecrickets.jvm" name="json-jvm" version="1.1+" />
			<module group="com.threecrickets.creel" name="creel" version="1.0.1+" />
			<module group="org.apache.commons" name="commons-vfs" version="1.0+" />
			<module group="org.apache.commons" name="commons-logging" version="1.1+" />
			<module group="org.apache.ivy" name="ivy" version="2.4.0" />
			<module group="org.jsoup" name="jsoup" version="1.8+" />
			<!-- <module group="org.junit" name="junit" version="4.12+" /> -->
			<module group="org.mozilla" name="rhino" version="1.7+" />
			<module group="jline" name="jline" version="2.14.6" />
			
			<!-- For compilation only -->
			<module group="org.apache.ant" name="ant" version="1.8+" /> <!-- Note: When invoking Ant through the Maven Ant plugin we cannot use the includeAntRuntime attributes in the javac task -->
			<module group="org.apache.logging.log4j" name="log4j-api" version="2.6.1" />
			<module group="org.apache.logging.log4j" name="log4j-core" version="2.6.1" />
			<module group="org.mongodb" name="mongodb-driver" version="[3.1,3.2)" />
			<module group="org.mongodb" name="mongodb-driver-core" version="[3.1,3.2)" />
			<module group="org.mongodb" name="bson" version="[3.1,3.2)" />
			
			<rule type="excludeDependencies" group="org.apache.ant" />
			<rule type="excludeDependencies" group="org.apache.logging.log4j" />
			<rule type="excludeDependencies" group="org.mongodb" />
			<repository id="repo" url="${dependencies.repo}" />
		</creel:run>
		<path id="dependencies">
			<path refid="dependencies-creel" />
			<fileset dir="${dependencies.jars}" includes="**/*.jar" />
		</path>
	</target>

	<target name="classes-eclipse" if="eclipse.home" description="Compile Eclipse Plugin Java code">
		<mkdir dir="${cache.eclipsePlugin}" />
		<javac srcdir="${component.eclipsePlugin}/src" destdir="${cache.eclipsePlugin}" source="${compile.version}" target="${compile.version}" includeAntRuntime="no" debug="${compile.debug}" bootclasspath="${compile.boot}">
			<classpath>
				<fileset dir="${eclipse.home}/plugins" includes="**/*.jar" />
			</classpath>
		</javac>
		<copy todir="${cache.eclipsePlugin}">
			<fileset dir="${component.eclipsePlugin}" includes="icons/**, schema/**, plugin.xml" />
		</copy>
	</target>
		
	<target name="classes" depends="dependencies" description="Compile Java code">
		<mkdir dir="${cache.classes}" />
		<javac srcdir="${component.source}" destdir="${cache.classes}" source="${compile.version}" target="${compile.version}" includeAntRuntime="no" debug="${compile.debug}" bootclasspath="${compile.boot}">
			<classpath refid="dependencies" />
		</javac>
		<copy todir="${cache.classes}">
			<fileset dir="${component.resources}" />
		</copy>

		<mkdir dir="${cache.agent}" />
		<javac srcdir="${component.agent}/source" destdir="${cache.agent}" source="${compile.version}" target="${compile.version}" includeAntRuntime="no" debug="${compile.debug}"  bootclasspath="${compile.boot}"/>

		<antcall target="classes-eclipse" />
	</target>

	<target name="version">
		<mkdir dir="${cache.classes}" />
		<propertyfile file="${cache.classes}/com/threecrickets/sincerity/version.conf">
			<entry key="version" value="${component.version}${component.version.postfix}" />
			<entry key="built" type="date" value="now" pattern="MMM dd yyyy, HH:mm:ss, 'TZ'Z" />
		</propertyfile>
	</target>

	<target name="javadocs" description="Create API documentation if not present">
		<available file="${distribution.api}" property="javadocs-present" />
		<antcall target="javadocs-overwrite" />
	</target>

	<target name="javadocs-overwrite" depends="dependencies" description="Create API documentation" unless="javadocs-present">
		<javadoc
			destdir="${distribution.api}" sourcepath="${component.source}" excludepackagenames="**.internal.*"
			access="protected" source="${compile.version}"
			windowtitle="${documentation.title} ${component.version}${component.version.postfix}" doctitle="${documentation.title} ${component.version}${component.version.postfix}"
			author="true" splitindex="true" use="true" version="true" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false">

			<link href="${documentation.jvm}" />
			<!-- Apache Commons VFS 1.0 has no online javadocs -->
			<!-- Apache Ant has no online javadocs -->
			<link href="http://jsoup.org/apidocs/" />
			<link href="http://threecrickets.com/api/java/scripturian/" />
			<link href="http://www.mozilla.org/rhino/apidocs/" />
			<link href="https://logging.apache.org/log4j/2.x/log4j-api/apidocs/" />
			<classpath refid="dependencies" />
			<bottom>
				<![CDATA[<i>${documentation.copyright}</i>]]>
			</bottom>
		</javadoc>
	</target>

	<target name="manual" description="Create manual if not present">
		<available file="${distribution.manual}" property="manual-present" />
		<antcall target="manual-overwrite" />
	</target>
	
	<target name="clean-manual" description="Clean manual">
		<delete dir="${distribution.manual}" />
	</target>
	
	<target name="manual-lyx" if="lyx">
		<exec executable="${lyx}">
			<arg value="--export" />
			<arg value="pdf" />
			<arg value="${distribution.manual}/${component}_manual.lyx" />
		</exec>
	</target>
	
	<target name="manual-elyxer" if="elyxer">
		<exec executable="${elyxer}">
			<arg value="--unicode" />
			<arg value="--title" />
			<arg value="${documentation.title} Manual" />
			<arg value="--css" />
			<arg value="dark-cricket-documentation.css" />
			<arg value="${distribution.manual}/${component}_manual.lyx" />
			<arg value="${distribution.manual}/${component}_manual.html" />
		</exec>
	</target>
	
	<target name="manual-overwrite" description="Create manual" unless="manual-present">
		<mkdir dir="${distribution.manual}" />
		<copy todir="${distribution.manual}">
			<fileset dir="${component.reference}/manual" excludes="**/*~" />
			<filterchain>
				<replacetokens>
					<token key="VERSION" value="${component.version}${component.version.postfix}" />
				</replacetokens>
			</filterchain>
		</copy>
		<antcall target="manual-lyx" />
		<antcall target="manual-elyxer" />
	</target>

	<target name="libraries-eclipse-plugin" if="eclipse.home" description="Create Eclipse Plugin jars">
		<jar destfile="${distribution.eclipsePlugin}/sincerity-eclipse-plugin.jar" basedir="${cache.eclipsePlugin}" manifest="${component.eclipsePlugin}/META-INF/MANIFEST.MF" />
	</target>

	<target name="libraries" depends="classes, version" description="Create jars">
		<mkdir dir="${distribution.jars}" />
		<jar destfile="${distribution.jars}/${component.group}/${component.artifact}/${component.version}${component.version.postfix}/${component.artifact}.jar" basedir="${cache.classes}" excludes="com/threecrickets/bootstrap/*">
			<manifest>
				<attribute name="Implementation-Title" value="${component.group}:${component.artifact}" />
				<attribute name="Implementation-Version" value="${component.version}${component.version.postfix}" />
				<attribute name="Implementation-Vendor" value="Three Crickets" />
				<attribute name="Main-Class" value="com.threecrickets.creel.Creel" />
			</manifest>
		</jar>
		<jar destfile="${distribution.content}/bootstrap.jar" basedir="${cache.classes}" includes="com/threecrickets/bootstrap/*">
			<manifest>
				<attribute name="Main-Class" value="com.threecrickets.bootstrap.Bootstrap" />
				<attribute name="Implementation-Title" value="com.threecrickets:bootstrap" />
				<attribute name="Implementation-Version" value="${component.version}${component.version.postfix}" />
				<attribute name="Implementation-Vendor" value="Three Crickets" />
			</manifest>
		</jar>

		<mkdir dir="${distribution.agent}" />
		<jar destfile="${distribution.agent}/firewall-friendly-agent.jar" basedir="${cache.agent}" manifest="${component.agent}/resources/META-INF/MANIFEST.MF" />

		<antcall target="libraries-eclipse-plugin" />
	</target>

	<target name="distribution-minimal" depends="libraries" description="Assemble distribution">
		<copy todir="${distribution.jars}">
			<fileset dir="${cache.jars}">
				<!-- Don't include compile-only jars -->
				<exclude name="org.apache.ant/**" />
				<exclude name="org.apache.logging.log4j/**" />
				<exclude name="org.mongodb/**" />
			</fileset>
		</copy>
		<copy todir="${distribution.source}">
			<fileset dir="${component.source}" />
		</copy>
		<copy todir="${distribution.content}">
			<fileset dir="${component.notices}" />
			<fileset dir="${component.scripts}" excludes="*.old" />
			<fileset dir="${dependencies}" includes="**/ivy.jar" />
			<fileset dir="${component.sincerity-javascript-library}" />
		</copy>
		<copy todir="${distribution.templates}">
			<fileset dir="${component.templates}" />
		</copy>
		<chmod perm="ugo+rx">
			<fileset dir="${distribution.content}" includes="sincerity" />
		</chmod>
	</target>

	<target name="distribution" depends="distribution-minimal, javadocs, manual" description="Assemble distribution" />

	<target name="package-zip" depends="distribution" description="Create zip distribution package">
		<zip destfile="${distribution}/${component}-${component.version}${component.version.postfix}.zip">
			<zipfileset dir="${distribution.content}" excludes="cache/, logs/, sincerity" />
			<zipfileset dir="${distribution.content}" includes="sincerity" filemode="755" />
		</zip>
	</target>

	<target name="package-deb-sign" if="dpkg-sig">
		<exec executable="${dpkg-sig}">
			<arg value="--sign" />
			<arg value="builder" />
			<arg value="-k" />
			<arg value="${jdeb.key}" />
			<arg value="-g" />
			<arg value="--no-tty" />
			<arg value="${distribution}/${component}-${component.version}${component.version.postfix}.deb" />
		</exec>
	</target>
	
	<target name="package-deb-signed" if="jdeb.key">
		<!-- signPackage="false" -->
		<jdeb:jdeb
			keyring="${jdeb.keyring}"
			key="${jdeb.key}"
			passphrase="${jdeb.passphrase}"
			control="${cache}/deb"
			changesIn="linux/changes.txt"
			changesSave="linux/changes.txt"
			changesOut="${distribution}/${component}-${component.version}${component.version.postfix}.changes"
			destfile="${distribution}/${component}-${component.version}${component.version.postfix}.deb">
			<tarfileset dir="${distribution.content}" prefix="/usr/lib/${component}">
				<exclude name="sincerity" />
			</tarfileset>
			<tarfileset dir="${distribution.content}" prefix="/usr/lib/${component}" filemode="755">
				<include name="sincerity" />
			</tarfileset>
			<tarfileset dir="linux" prefix="/usr/share/applications">
				<include name="${component}.desktop" />
			</tarfileset>
			<tarfileset dir="linux" prefix="/usr/share/doc/${component}">
				<include name="copyright" />
			</tarfileset>
		</jdeb:jdeb>
		<antcall target="package-deb-sign" />
	</target>

	<target name="package-deb-unsigned" unless="jdeb.key">
		<jdeb:jdeb
			control="${cache}/deb"
			changesIn="linux/changes.txt"
			changesSave="linux/changes.txt"
			changesOut="${distribution}/${component}-${component.version}${component.version.postfix}.changes"
			destfile="${distribution}/${component}-${component.version}${component.version.postfix}.deb">
			<tarfileset dir="${distribution.content}" prefix="/usr/lib/${component}">
				<exclude name="sincerity" />
			</tarfileset>
			<tarfileset dir="${distribution.content}" prefix="/usr/lib/${component}" filemode="755">
				<include name="sincerity" />
			</tarfileset>
			<tarfileset dir="linux" prefix="/usr/share/applications">
				<include name="${component}.desktop" />
			</tarfileset>
			<tarfileset dir="linux" prefix="/usr/share/doc/${component}">
				<include name="copyright" />
			</tarfileset>
		</jdeb:jdeb>
	</target>

	<target name="package-deb" depends="distribution" description="Create Debian package">
		<copy todir="${cache}/deb">
			<fileset dir="linux/deb" excludes="**/*~" />
			<filterchain>
				<replacetokens>
					<token key="VERSION" value="${component.version.short}${component.version.short.postfix}" />
				</replacetokens>
			</filterchain>
		</copy>
		<antcall target="package-deb-signed" />
		<antcall target="package-deb-unsigned" />
	</target>

	<target name="package-rpm-sign" if="rpm">
		<exec executable="${rpm}" inputstring="${rpm.passphrase}">
			<arg value="--addsign" />
			<arg value="-D" />
			<arg value="_signature gpg" />
			<arg value="-D" />
			<arg value="_gpg_name ${rpm.key}" />
			<arg value="${distribution}/${component}-${component.version.short}${component.version.short.postfix}-0.noarch.rpm" />
		</exec>
	</target>

	<target name="package-rpm" depends="distribution" description="Create RPM package">
		<redline:rpm
			group="Three Crickets" name="${component}" version="${component.version.short}${component.version.short.postfix}" release="0"
			summary="Sincerity is a container and dependency manager for the JVM."
			description="Sincerity is a container and dependency manager for the JVM."
			license="LGPLv3+"
			vendor="Three Crickets LLC"
			packager="Tal Liron &lt;tal.liron@gmail.com&gt;"
			postinstallscript="linux/rpm/postinst"
			destination="${distribution}">
			<zipfileset dir="${distribution.content}" prefix="/usr/lib/${component}" />
			<zipfileset file="linux/${component}.desktop" prefix="/usr/share/applications" />
			<link path="/usr/bin/${component}" target="/usr/lib/${component}/${component}" permissions="755" /> <!-- "-rwxr-xr-x" = 755 octal, 493 decimal -->
		</redline:rpm>
		<antcall target="package-rpm-sign" />
		<move file="${distribution}/${component}-${component.version.short}${component.version.short.postfix}-0.noarch.rpm" toFile="${distribution}/${component}-${component.version}${component.version.postfix}.rpm" />
	</target>

	<target name="package-universal-installer" depends="distribution" description="Create IzPack installer">
		<izpack basedir="${basedir}" input="${basedir}/izpack/${component}.xml" output="${distribution}/${component}-${component.version}${component.version.postfix}-installer.jar" inheritAll="true" installerType="standard" />
	</target>

	<target name="package-platform-installers" depends="distribution" description="Create InstallBuilder installer" if="installbuilder">
		<copy todir="${cache}" file="${root}/build/installbuilder/${component}.xml">
			<filterchain>
				<replacetokens>
					<token key="VERSION" value="${component.version}${component.version.postfix}" />
				</replacetokens>
			</filterchain>
		</copy>
		<exec executable="${installbuilder}">
			<arg value="build" />
			<arg value="${cache}/${component}.xml" />
			<arg value="windows" />
			<arg value="--license" />
			<arg value="./installbuilder/license.xml" />
		</exec>
		<exec executable="${installbuilder}">
			<arg value="build" />
			<arg value="${cache}/${component}.xml" />
			<arg value="osx" />
			<arg value="--license" />
			<arg value="${root}/build/installbuilder/license.xml" />
			<arg value="--setvars" />
			<arg value="project.outputDirectory=${cache}" />
		</exec>
		<zip destfile="${distribution}/${component}-${component.version}${component.version.postfix}-osx-installer.zip">
			<zipfileset dir="${cache}/${component}-${component.version}${component.version.postfix}-osx-installer.app" prefix="${component}-${component.version}${component.version.postfix}-osx-installer.app" />
		</zip>
		<chmod perm="ugo+rx">
			<fileset dir="${distribution}" includes="*.run" />
		</chmod>
	</target>

	<target name="package" depends="package-zip, package-deb, package-rpm, package-universal-installer, package-platform-installers" description="Create all packages and installers" />

	<target name="deploy-maven" if="maven" depends="distribution" description="Deploy to Maven repository">
		<delete dir="${cache.maven.pom}" />
		<delete dir="${cache.maven.build}" />
		<copy todir="${cache.maven.pom}">
			<fileset dir="maven" excludes="**/*~" />
			<filterchain>
				<replacetokens>
					<token key="VERSION" value="${component.version}${component.version.postfix}" />
					<token key="DEPENDENCIES" value="${dependencies.repo}" />
					<token key="ROOT" value="${root}" />
					<token key="CACHE" value="${cache.maven.build}" />
					<token key="CONTENT" value="${distribution.content}" />
				</replacetokens>
			</filterchain>
		</copy>
		<exec executable="${maven}" dir="${cache.maven.pom}">
			<arg value="deploy" />
			<arg value="-DaltDeploymentRepository=default::default::${distribution.repo}" />
		</exec>
	</target>

	<target name="deploy-packages" if="packages.repo" description="Deploy to packages repository">
		<packages suffix="-installer.jar" />
		<packages suffix=".zip" />
		<packages suffix=".rpm" />
		<packages suffix=".deb" />
		<packages suffix="-osx-installer.zip" />
		<packages suffix="-windows-installer.exe" />
	</target>

	<target name="build" depends="distribution" description="Build distribution" />
	
	<target name="clean" description="Clean">
		<delete dir="${cache}" />
		<delete dir="${distribution}" />
	</target>
	
	<target name="rebuild" depends="clean, build" description="First clean and then build distribution" />

</project>
